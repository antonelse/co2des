-- *********************** user defined functions ***********************


-- FADE OUT *****
--byeByeWithGas t = mapM_ (\i -> xfadeIn i t silence) [1 .. 16]

--simple usage:
--byeByeWithGas 4

--The mapM_ function takes each number in the list [1 .. 16] and gives it to (\i -> xfadeIn i t silence). The \ is called 'lambda' and puts the number in the i variable. Then that gets used in the xfadeIn.

-- FADE IN *****
-- welcomeWithGas t = mapM_ (\i -> fadeOutFrom i t silence) [1 .. 16]

-- *********************** various Haskell tips ***********************

addSix :: Num a => a -> a

addSix x = x + 6

addSix 3
--returns 9

------------

let
  a = 1.5
  b = floor a
  c = fromIntegral b

-- *********************** useful command ***********************

tidal_version

:t --command for understand a function

cmd + "dot" -- alternative way for hush

hush

setcps (140/60/4)

--metronome
d1 $ n "2 1 1 1" # s "hi" #gain 0.85

--see osc_test.scl for OSC server initialization and test


-- *********************** OSC message examples ***********************
/ctrl sf param 0.4
/ctrl ss code msgn
--the first value is a (s)tring and the second value is a(f)loat
--cF is what you use for floating point controls. The second 0 or 1, for when tidal hasn't received that control yet.
--cS for strings
--cI for integers
--cT for time values (for using e.g. as the first parameter of fast/slow)
--cR for ratios

(cF 0.7 "filter")
--The first parameter (0.7) is the default value, for when tidal hasn't received that control.


--OSC for evaluating Atom cells
--Ip: 127.0.0.1 / Port: 3333
-- /atom/eval/type

--arguments
--line (evaluate single line)
--multi_line (evaluate code block)
--whole_editor (evaluate all the editor)

--row
--column


-- *********************** audio/OSC test ***********************


d1 $ every 2 (# djf (cF 1 "filter")) $ sound "bd sd [~ bd] [cp bd*2]" #gain 0.9

d2 $ slow (cT 0 "every") $ loopAt (cT 0 "pan") $ striate 4 $ sound "break:8 break:9"

d3 $ every 2 (hurry (cT 0 "pan")) $ loopAt (cT 0 "delay") $ chop 8 $ n "3 4" # sound "theme:10"

d4 $ s "808" # n (cF 1 "filter")

d4 silence

-- *********************** xfade function ***********************
:t xfade
xfadeIn 1 8

xfadeIn 1 8 $ s "hi*8?" #gain 1.3

-- *********************** PATTERN CHOICE TEST ***********************


-- AUDIO TEST 1

setcps (160/60/4)


--create an array for a specific user (e.g. _USER1) and map the respective param (e.g slow == _USER1[0], chrusher == _USER1[1] etc) in the tidal code
--in the tidal code i ONLY have to put the _USER number, so it foods the entire pre constructed pattern  show -an alternative could be the one that pre-select a range in the array for the specific param, and then call it in the functions

--let _USER1 = (cT 2 "slow")

let _xaria_slow = (cT 2 "slow")
    _xaria_crusher = (cF 1 "crusher")
    _xaria_cutoff = (cF 400 "cutoff")
    _xaria_offset = (cT 0 "offset")

let _pattern_1 =




d2 $ stack [slow _xaria_slow $ loopAt 1 $ striate 4 $ sound "break:1*4" #gain 1.3
            --sound "clubkick:4(5,8)" #gain 1.3 #room 0.1
          ]


d3 $ speed "1*2 2 2 4*3" # s "jungbass:6" #gain 0.9 # squiz _xaria_crusher


d4 $ off 0.125 (# crush 3) $ n "0 1 2 3" # sound "bass" |+ n "2 5 6" #cutoff (range 0 _xaria_cutoff sine)


d4 $ off _xaria_offset (# crush 3) $ sound "rave:7(5,8)" #gain 0.88


d3 silence



-- AUDIO TEST 2

setcps (100/60/4)

--off // from 0 to 1
d1 $ stack[loopAt 4 $ sound "theme:15",
          off 0.5 (# distort 2) $ loopAt 4 $ sound "theme:15" #gain 0.7
          ]

--squiz // from 1 to 15

d2 $ n "1 ~ ~ 1 ~ 1 ~ ~" # s "jungbass:2" #squiz 3

d3 $ stack[n "[1*2] (5,8)" # s "808oh:5",
          n "1 ~ ~ 1 ~ 1 ~ ~" # s "808bd:1" #gain 1.5
        ]




-- DA FINIREEEEEEEEEEEEE





-- **************************************************************************************


let _xaria_slow = (cT 2 "slow")
    _xaria_crusher = (cF 1 "crusher")
    _xaria_cutoff = (cF 400 "cutoff")
    _xaria_offset = (cT 0 "offset")



d2 $ stack [slow _xaria_slow $ loopAt 1 $ striate 4 $ sound "break:1*4" #gain 1.3
            --sound "clubkick:4(5,8)" #gain 1.3 #room 0.1
          ]


d3 $ speed "1*2 2 2 4*3" # s "jungbass:6" #gain 0.9 # squiz _xaria_crusher


d4 $ off 0.125 (# crush 3) $ n "0 1 2 3" # sound "bass" |+ n "2 5 6" #cutoff (range 0 _xaria_cutoff sine)


d4 $ off _xaria_offset (# crush 3) $ sound "rave:7(5,8)" #gain 0.88

byeByeWithGas 2



-- **************************************************************************************


d1 $ repeatCycles 3 $ n "2 1 1 1" # s "hi" #gain 0.85
