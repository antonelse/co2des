-- *********************** user defined functions ***********************************

-- FADE OUT *****
-- The mapM_ function takes each number in the list [1 .. 16] and gives it to (\i -> xfadeIn i t silence). The \ is called 'lambda' and puts the number in the i variable. Then that gets used in the xfadeIn.
byeByeWithGas t = mapM_ (\i -> xfadeIn i t silence) [1 .. 16]
byeByeWithGas 4


-- FADE IN *****
-- welcomeWithGas t = mapM_ (\i -> fadeOutFrom i t silence) [1 .. 16]


-- FLOOD TEXT *****
newtype Text = Text String
instance Show Text where show (Text str) = str
prettyPut s = putStr . show $ Text s
cassa s = mapM_  prettyPut $ replicate 150 s

cassa "DJ ONEIR"


-- RANGE VALUE MAPPING *****
-- starting point: (range (-2) 2 $ cF 1 "_cutoff")
rangeMapClip x = min x $ max (-x) $ range (-x) x $ cF 1 "cutoff" --ranging clipping
rangeMap x y = range (-x) y $ cF 1 "cutoff" --ranging min max

d1 $ sound "bd" # speed (rangeMap (-2) 3)


-- *********************** various Haskell tips ***********************************

-- addSix :: Num a => a -> a ,tipologia input output
addSix x = x + 6
addSix 3
--returns 9

----------

-- execute multiple statements
let
  a = 1.5
  b = floor a
  c = fromIntegral b


-- *********************** useful command ***********************************

tidal_version

:t -- command for understand I/O of a function

cmd + "dot" -- alternative way for hush

hush -- stop all

setcps (160/60/4) -- xxx bpm, with 4 beats per cycle

d1 $ n "2 1 1 1" # s "hi" #gain 0.85 -- metronome


-- *********************** OSC message examples ***********************************
/ctrl sf param 0.4
/ctrl ss code msgn
--the first value is a (s)tring and the second value is a(f)loat

(cF 0.7 "filter") --The first parameter (0.7) is the default value, for when tidal hasn't received that control.
--cF is what you use for floating point controls. The second 0 or 1, for when tidal hasn't received that control yet.
--cS for strings
--cI for integers
--cT for time values (for using e.g. as the first parameter of fast/slow)
--cR for ratios

--OSC for evaluating Atom cells
--Ip: 127.0.0.1 / Port: 3333
-- /atom/eval/type

--arguments
--line (evaluate single line)
--multi_line (evaluate code block)
--whole_editor (evaluate all the editor)

--row
--column

-- **************************************************************************************

-- *********************** PRE SETTINGS ***********************

--UPDATE the repl.js ATOM file with the Processing IP address
--OPEN loopback app, join SuperCollider to SoundFlower
--GO TO https://wemakethings.pythonanywhere.com/static/index.html fot the web app
--EXECUTE some lines (above)

--user param control
let _slow = (cT 2 "slow")
    _crusher = (cF 1 "crusher")
    _cutoff = (cF 400 "cutoff")
    _offset = (cT 0 "offset")

--PANIC ONLY param control hard reset
let _slow = 2
    _crusher = 1
    _cutoff = 400
    _offset = 0

--background noise
d1 $ loopAt 4 $ s "crackle:3" #gain 0.85

once $ s "crackle:3"

-- *********************** LIVE TEST ***********************

-- AUDIO TEST 1

setcps (130/60/4)

d2 $ stack [
    slow _slow $ loopAt 1 $ striate 4 $ sound "break:1*4" #gain 0.95,
    sound "clubkick:4(5,8)" #gain 0.98 #room 0.1
    ]

d3 $ speed "1*2 2 2 4*3" # s "jungbass:6"
                        #gain 0.9
                        # squiz _crusher

d4 $ off 0.125 (# crush 3)
    $ n "0 1 2 3" # sound "bass" |+ n "2 5 6" #cutoff (range 0 _cutoff sine)

d5 $ off _offset (# crush 3)
    $ sound "rave:3(5,8)" #gain 0.70

d4 silence

byeByeWithGas 4


-- AUDIO TEST 2

setcps (150/60/4)

d2 $ off _offset (#gain 0.8) $ loopAt 4 $ sound "theme:15" #gain 1

d3 $ n "1 ~ ~ 1 ~ 1 ~ ~" # s "jungbass:2" #squiz _crusher

d4 $ stack[n "[1*2](5,8)" # s "808oh:5", n "1 ~ ~ 1 ~ 1 ~ ~" # s "808bd:1" #gain 1.5, every 2 (sometimes (#speed _crusher)) $ n "16(10,16)" # s "cpu"]

d5 $ jux rev $ loopAt 3 $ splice 16 "4 6 ~ ~ 1 15 14 3 4 2! ~" $ sound "sr:4" #gain 0.95 #cutoff _cutoff

byeByeWithGas 8

d5 silence

-- AUDIO TEST 3

setcps(170/60/4)

d2 $ off _offset (#gain (range 0.7 1 sine)) $ loopAt 16 $ splice 16 "0..15" $ sound "theme:4"

d3 $ sometimes (hurry _slow . (#squiz 4)) $ jux rev $ n "2 2 6 7" |<| " [0 0 0] . 4 5" # s "rave2" #room 0.2 #sz 0.6 #gain 0.60

d4 $ sometimes (#crush _crusher) $ n "3 3 [4 3?] 5?0.1" # s "gab" #delay 0.3 #delayt 0.33 #delayfb 0.4 #cutoff (range 400 15000 saw) #gain 0.92

  -- $ n "6 6?*6"
  -- $ n "6*4"

d5 $ loopAt 4 $ splice 16 "0 2 6 9 12 7 14 2?" $ sound "sr:2" #cutoff _cutoff #gain 1

d3 silence

d4 silence

d5 silence

once $ s "cazzate:3" -- la scoteca

once $ s "cazzate:6" -- horn

byeByeWithGas 8

-- *********************** Additional Pattern ***********************

d1 $ jux (# accelerate "-0.1") $ s "supermandolin*8" # midinote "[80!6 78]/8" # sustain "1 0.25 2 1"

d1 $ midinote (slow 2 $ (run 8) * 7 + 50) # s "supergong" # decay "[1 0.2]/4" # voice "[0.5 0]/8" # sustain (slow 16 $ range 5 0.5 $ saw1)

d1 $ sound "superhat:0*8" # sustain "0.125!6 1.2" # accelerate "[0.5 -0.5]/4"

d1 $ s "super808 supersnare" # n (irand 5) # voice "0.2" # decay "[2 0.5]/4" # accelerate "-0.1" # sustain "0.5" # speed "[0.5 2]/4"

d1 $ n (slow 8 "[[c5 e5 g5 c6]*4 [b4 e5 g5 b5]*4]") # s "superpiano" # velocity "[1.20 0.9 0.8 1]"

d1 $ n (slow 8 $ "[[c4,e4,g4,c5]*4 [e4,g4,b5,e5]*4]" + "<12 7>") # s "superpiano" # velocity (slow 8 $ range 0.8 1.1 sine) # sustain "8"

d1 $ n "[c2 e3 g4 c5 c4 c3]/3" # s "[superpwm supersaw supersquare]/24" # sustain "0.5" # voice "0.9" # semitone "7.9" # resonance "0.3" # lfo "3" # pitch1 "0.5" # speed "0.25 1"

d1 $ every 16 (density 24 . (|+| midinote "24") . (# sustain "0.3") . (# attack "0.05")) $ s "supercomparator/4" # midinote ((irand 24) + 24) # sustain "8" # attack "0.5" # hold "4" # release "4" # voice "0.5" # resonance "0.9" # lfo "1" # speed "30" # pitch1 "4"

d1 $ n "[c2 e3 g4 c5 c4 c3]*4/3" # s "superchip" # sustain "0.1" # pitch2 "[1.2 1.5 2 3]" # pitch3 "[1.44 2.25 4 9]" # voice (slow 4 "0 0.25 0.5 0.75") # slide "[0 0.1]/8" # speed "-4"

d2 $ every 4 (echo (negate 3/32)) $ n "c5*4" # s "supernoise" # accelerate "-2" # speed "1" # sustain "0.1 ! ! 1" # voice "0.0"

d1 $ s "supernoise/8" # midinote ((irand 10) + 30) # sustain "8" # accelerate "0.5" # voice "0.5" # pitch1 "0.15" # slide "-0.5" # resonance "0.7" # attack "1" # release "20" # room "0.9" # size "0.9" # orbit "1"


-- **************************************************************************************
-- **************************************************************************************
-- **************************************************************************************


-- *********************** function test ***********************

-- shift ~>




-- iter




-- every



-- ply



-- slow SOLO QUI (vedi se riesci a creare funz)

d1 $ slow 3 $ jux rev $ loopAt 8 $ striate 128 $ sound "theme:17" #gain 0.9
