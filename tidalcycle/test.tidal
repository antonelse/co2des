-- *********************** useful command

--for update
. ~/.ghcup/env
cabal update
cabal install tidal --lib

tidal_version

:t --command for understand a function

cmd + "dot" -- alternative way for hush

hush

setcps (140/60/4)

--metronome
d1 $ n "2 1 1 1" # s "hi" #gain 0.85


-- *********************** comments section
--see osc_test.scl for OSC server initialization


-- *********************** OSC message examples
/ctrl sf param 0.4
/ctrl ss code msgn
--the first value is a (s)tring and the second value is a(f)loat
--cF is what you use for floating point controls. The second 0 or 1, for when tidal hasn't received that control yet.
--cS for strings
--cI for integers
--cT for time values (for using e.g. as the first parameter of fast/slow)
--cR for ratios

(cF 0.7 "filter")
--The first parameter (0.7) is the default value, for when tidal hasn't received that control.
-- *********************** audio/OSC test


d1 $ every 2 (# djf (cF 1 "filter")) $ sound "bd sd [~ bd] [cp bd*2]" #gain 0.9

d2 $ slow (cT 0 "every") $ loopAt (cT 0 "pan") $ striate 4 $ sound "break:8 break:9"

d3 $ every 2 (hurry (cT 0 "pan")) $ loopAt (cT 0 "delay") $ chop 8 $ n "3 4" # sound "theme:10"

d4 $ s "808" # n (cF 1 "filter")

d4 silence

-- *********************** xfade function
:t xfade
xfadeIn 1 8
d1 $ s "bd*8?"


d3 $ every 2 (hurry (cT 0 "user3")) $ loopAt (cT 0 "user4") $ chop 8 $ n "3 4" # sound "theme:15"

xfadeIn 1 8 $ every 2 (hurry 4) $ loopAt (cT 0 "user4") $ chop 8 $ n "3 4" # sound "theme:15"

xfadeIn 1 8 $ s "808" # n (cF 1 "user4")

do d1 $ s "bd*8?"

let userPattern = every 2 (hurry (cT 0 "pan")) $




-- *********************** haskell various tests

addSix :: Num a => a -> a

addSix x = x + 6

addSix 3
--returns 9

-- *********************** PATTERN CHOICE TEST


-- AUDIO TEST 1

setcps (160/60/4)

(cF 1 "slow")
(cF 1 "crusher")
(cF 1 "cutoff")
(cF 1 "offset")

let aria = 1


-- slow // from 2 to 6
d2 $ stack [slow 2 $ loopAt 1 $ striate 4 $ sound "break:1*4",
            sound "clubkick:4(5,8)" #gain 1.3 #room 0.1
          ]

--squiz // from 1 to 15
d3 $ speed "1*2 2 2 4*3" # s "jungbass:6" #gain 0.9 # squiz 1

--cutoff // from 400 to 15000
d4 $ off 0.125 (# crush 3) $ n "0 1 2 3" # sound "bass" |+ n "2 5 6" #cutoff (range 0 13000 sine)

--off // from 0 to 1
d4 $ off 1 (# crush 3) $ sound "rave:7(5,8)" #gain 0.9


once $ s "break:10"

d3 silence



-- AUDIO TEST 2

setcps (100/60/4)

--off // from 0 to 1
d1 $ stack[loopAt 4 $ sound "theme:15",
          off 0.5 (# distort 2) $ loopAt 4 $ sound "theme:15" #gain 0.7
          ]

--squiz // from 1 to 15
d2 $ n "1 ~ ~ 1 ~ 1 ~ ~" # s "jungbass:2" #squiz 3

d3 $ stack[n "[1*2] (5,8)" # s "808oh:5",
          n "1 ~ ~ 1 ~ 1 ~ ~" # s "808bd:1" #gain 1.5
        ]




-- DA FINIREEEEEEEEEEEEE




-- **************************************************************************************
-- AUDIO TEST 1

setcps (160/60/4)

(cF 1 "slow")
(cF 1 "crusher")
(cF 1 "cutoff")
(cF 1 "offset")

let aria_float = (cF 1 "offset")
let aria_time = (cT 1 "offset")
let aria_sting = (cS 1 "offset")



-- slow // from 2 to 6
d2 $ stack [slow (cT 1 "slow") $ loopAt 1 $ striate 4 $ sound "break:1*4",
            sound "clubkick:4(5,8)" #gain 1.3 #room 0.1
          ]

--squiz // from 1 to 15
d3 $ speed "1*2 2 2 4*3" # s "jungbass:6" #gain 0.9 # squiz (cF 1 "crusher")

--cutoff // from 400 to 15000
d4 $ off 0.125 (# crush 3) $ n "0 1 2 3" # sound "bass" |+ n "2 5 6" #cutoff (range 0 (cF 1 "cutoff") sine)

--off // from 0 to 1
d4 $ off (cT 1 "offset") (# crush 3) $ sound "rave:7(5,8)" #gain 0.9




d3 silence


d2 $ stack [slow (cT 1 "slow") $ loopAt 1 $ striate 4 $ sound "break:1*4",
            sound "clubkick:4(5,8)" #gain 1.3 #room 0.1
          ]
